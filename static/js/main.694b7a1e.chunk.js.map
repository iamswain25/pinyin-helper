{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["splitter","GraphemeSplitter","App","React","useState","text","setText","left","top","visible","title","aside","setAside","withPinyin","useMemo","splitGraphemes","map","ch","i","pinyin","createElement","children","key","style","padding","fontSize","value","onChange","ev","target","width","whiteSpace","onMouseOver","tagName","hasAttribute","getAttribute","offsetLeft","offsetTop","onMouseOut","position","boxShadow","backgroundColor","borderRadius","visibility","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yPAaMA,EAAW,IAAIC,IAEN,SAASC,IAAO,IAAD,EACJC,IAAMC,SAZf,g2CAWa,mBACrBC,EADqB,KACfC,EADe,OAEFH,IAAMC,SAAS,CACvCG,KAAM,EACNC,IAAK,EACLC,SAAS,EACTC,MAAO,KANmB,mBAErBC,EAFqB,KAEdC,EAFc,KAuB5B,IAAMC,EAAaV,IAAMW,SAAQ,WAE/B,OADwBd,EAASe,eAAeV,GACnCW,KAAI,SAACC,EAAIC,GACpB,IAAMR,EAAQS,IAAOF,GACrB,OAAOd,IAAMiB,cAAc,OAAQ,CACjCC,SAAUJ,EACVP,QACAY,IAAI,OAAD,OAASJ,UAGf,CAACb,IACIE,EAA8BI,EAA9BJ,KAAMC,EAAwBG,EAAxBH,IAAKE,EAAmBC,EAAnBD,MAAOD,EAAYE,EAAZF,QAC1B,OACE,0BAASc,MAAO,CAAEC,QAAS,OAAQC,SAAU,UAA7C,UACE,cAAC,IAAD,CACEC,MAAOrB,EACPsB,SAAU,SAACC,GAAD,OAAQtB,EAAQsB,EAAGC,OAAOH,QACpCH,MAAO,CAAEO,MAAO,OAAQL,SAAU,YAEpC,yBACEF,MAAO,CAAEQ,WAAY,YACrBC,YApCN,SAA4BJ,GAC1B,IAAMC,EAASD,EAAGC,OAClB,GAAuB,SAAnBA,EAAOI,SAAsBJ,EAAOK,aAAa,SAAU,CAC7D,IAAMxB,EAAQmB,EAAOM,aAAa,UAAY,GAC9CvB,EAAS,CACPL,KAAMsB,EAAOO,WACb5B,IAAKqB,EAAOQ,UAAY,GACxB3B,QACAD,SAAS,MA6BT6B,WAzBN,WACE1B,EAAS,2BAAKD,GAAN,IAAaF,SAAS,MAqB5B,SAKGI,IAEH,uBACEU,MAAO,CACLhB,OACAC,MACA+B,SAAU,WACVC,UAAW,2BACXC,gBAAiB,QACjBjB,QAAS,SACTC,SAAU,OACViB,aAAc,SACdC,WAAYlC,EAAU,UAAY,UAVtC,SAaGC,OC3ET,IAYekC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACrD,EAAD,MAEFsD,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.694b7a1e.chunk.js","sourcesContent":["import React, { MouseEvent } from \"react\";\nimport pinyin from \"pinyin\";\nimport GraphemeSplitter from \"grapheme-splitter\";\nimport TextareaAutosize from \"react-textarea-autosize\";\nconst defaultText = `漁父辭\n屈原旣放, 游於江潭, 行吟澤畔. 顔色憔悴, 形容枯槁. 漁父見而問之曰,\n子非三閭大夫與. 何故至於斯. 屈原曰, 擧世皆濁, 我獨淸. 衆人皆醉, 我獨醒.\n是以見放. 漁父曰, 聖人不凝滯於物, 而能與世推移. 世人皆濁,\n何不淈其泥而揚其波. 衆人皆醉, 何不餔其糟而歠其醨. 何故深思高擧,\n自令放爲. 屈原曰, 吾聞之. 新沐者必彈冠, 新浴者必振衣. 安能以身之察察,\n受物之汶汶者乎. 寧赴湘流葬於江魚之腹中, 安能以皓皓之白,\n而蒙世俗之塵埃乎. 漁父莞爾而笑, 鼓枻而去. 乃歌曰, 滄浪之水淸兮,\n可以濯吾纓. 滄浪之水濁兮, 可以濯吾足. 遂去不復與言.`;\nconst splitter = new GraphemeSplitter();\n\nexport default function App() {\n  const [text, setText] = React.useState(defaultText);\n  const [aside, setAside] = React.useState({\n    left: 0,\n    top: 0,\n    visible: false,\n    title: \"\",\n  });\n  function onMouseOverHandler(ev: MouseEvent) {\n    const target = ev.target as HTMLElement;\n    if (target.tagName === \"SPAN\" && target.hasAttribute(\"title\")) {\n      const title = target.getAttribute(\"title\") || \"\";\n      setAside({\n        left: target.offsetLeft,\n        top: target.offsetTop - 80,\n        title,\n        visible: true,\n      });\n    }\n  }\n  function onMouseOutHandler() {\n    setAside({ ...aside, visible: false });\n  }\n  const withPinyin = React.useMemo(() => {\n    const split: string[] = splitter.splitGraphemes(text);\n    return split.map((ch, i) => {\n      const title = pinyin(ch);\n      return React.createElement(\"span\", {\n        children: ch,\n        title,\n        key: `key-${i}`,\n      });\n    });\n  }, [text]);\n  const { left, top, title, visible } = aside;\n  return (\n    <section style={{ padding: \"2rem\", fontSize: \"1.2rem\" }}>\n      <TextareaAutosize\n        value={text}\n        onChange={(ev) => setText(ev.target.value)}\n        style={{ width: \"100%\", fontSize: \"1.2rem\" }}\n      />\n      <article\n        style={{ whiteSpace: \"pre-line\" }}\n        onMouseOver={onMouseOverHandler}\n        onMouseOut={onMouseOutHandler}\n      >\n        {withPinyin}\n      </article>\n      <aside\n        style={{\n          left,\n          top,\n          position: \"absolute\",\n          boxShadow: \"0 0 1rem rgba(0,0,0,0.2)\",\n          backgroundColor: \"white\",\n          padding: \"0.5rem\",\n          fontSize: \"3rem\",\n          borderRadius: \"0.5rem\",\n          visibility: visible ? \"visible\" : \"hidden\",\n        }}\n      >\n        {title}\n      </aside>\n    </section>\n  );\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}